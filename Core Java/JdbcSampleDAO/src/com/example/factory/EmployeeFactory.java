package com.example.factory;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;

public class EmployeeFactory {

//	private Connection con = null; // previous

	// establish connection using singleton
	public static Connection con = null;
	private static EmployeeFactory employeeFactory;

	private EmployeeFactory() {

		super();

		try {
			// step 1: Load the driver
			// option 1
			// DriverManager.registerDriver(new com.mysql.jdbc.Driver());

			// option 2
			Class.forName("com.mysql.jdbc.Driver");

			// step 2: create database connection
			// create connection object
//			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sample", "root", "root");

			// decoupling of file
			FileInputStream fis = new FileInputStream("jdbc.properties");
			Properties prop = new Properties();
			prop.load(fis);
			String jdbcUrl = prop.getProperty("jdbcUrl");
			String userName = prop.getProperty("userName");
			String password = prop.getProperty("password");

			con = DriverManager.getConnection(jdbcUrl, userName, password);

		} catch (Exception e) {
			// TODO autogenerated catch block
			e.printStackTrace();
		}

	}

	// previous
//	public Connection getMyConnection () {
//		return con;
//	}
//	

	// singleton
	// it is make synchronized so only one user can use at a time
	public static synchronized EmployeeFactory getMyConnection() {
		if (employeeFactory == null) {
			employeeFactory = new EmployeeFactory();
		}
		return employeeFactory;
	}
}
